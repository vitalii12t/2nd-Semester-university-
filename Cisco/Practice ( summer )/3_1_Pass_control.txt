#include <iostream>
#include <string>

using namespace std;

class StringValidator
{
public:
	virtual ~StringValidator() {}; // a??ooaeuiee eiino?oeoi?
	virtual bool isValid(string input) = 0; // ?enoa a??ooaeuia ooieo?y aey ia?aa??ee ia?ie?
};


/*	****	OTHER CLASS		****	*/
class DummyValidator : public StringValidator {
public:

	bool isValid(std::string input);
};

/*	***		FUNCTION	***		*/
bool DummyValidator::isValid(std::string input) // i?eeiaoeia aoau-yeee ia?ieu
{
	return true;
}

/*	****	OTHER CLASS		****	*/
class ExactValidator : public StringValidator {
public:
	ExactValidator(string pattern);
	bool isValid(std::string input);

private:
	string pattern;
};


/*	****	CONSTRUCTOR & FUNCTION		****	*/
ExactValidator:: ExactValidator(string pattern){
	this -> pattern = pattern;
}

bool ExactValidator::isValid(std::string input)
{
	if ( this -> pattern == input ) return true;
	else return false;
}

void printValid(StringValidator &validator, string input)
// aeaiaeou ?acoeuoao ia?aa??ee a caea?iino? a?a oiai, ia'?eo yeiai eeano aeei?enoiao?ouny
{
	cout << "The string '" << input << "' is "<< (validator.isValid(input) ? "valid" : "invalid") << endl;
}


int main()
{
	DummyValidator dummy;
	printValid(dummy, "hello");
	ExactValidator exact("secret");
	printValid(exact, "hello");
	printValid(exact, "secret");

	return 0;
}
